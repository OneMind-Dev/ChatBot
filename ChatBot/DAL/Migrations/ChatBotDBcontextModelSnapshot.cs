// <auto-generated />
using DAL;
using DAOs;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ChatBotDBcontext))]
    partial class ChatBotDBcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BOs.Conversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConversationId"));

                    b.Property<string>("ConservationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("Conversations", (string)null);

                    b.HasData(
                        new
                        {
                            ConversationId = 1,
                            ConservationName = "Conversation 1",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("BOs.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<int>("ConservationId")
                        .HasColumnType("int");

                    b.Property<string>("ModelResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserResquest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.HasIndex("ConservationId");

                    b.ToTable("Messages", (string)null);

                    b.HasData(
                        new
                        {
                            MessageId = 1,
                            ConservationId = 1,
                            ModelResponse = "Hi",
                            UserResquest = "Hello"
                        },
                        new
                        {
                            MessageId = 2,
                            ConservationId = 1,
                            ModelResponse = "I'm fine, thank you",
                            UserResquest = "How are you?"
                        },
                        new
                        {
                            MessageId = 3,
                            ConservationId = 1,
                            ModelResponse = "My name is ChatBot",
                            UserResquest = "What is your name?"
                        });
                });

            modelBuilder.Entity("BOs.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("BOs.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "",
                            Avatar = "",
                            Email = "",
                            Password = "admin",
                            Phone = "",
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            Address = "",
                            Avatar = "",
                            Email = "",
                            Password = "user",
                            Phone = "",
                            RoleId = 2,
                            Username = "user"
                        },
                        new
                        {
                            UserId = 3,
                            Address = "",
                            Avatar = "",
                            Email = "",
                            Password = "string",
                            Phone = "",
                            RoleId = 2,
                            Username = "string"
                        },
                        new
                        {
                            UserId = 4,
                            Address = "",
                            Avatar = "",
                            Email = "",
                            Password = "1",
                            Phone = "",
                            RoleId = 2,
                            Username = "1"
                        });
                });

            modelBuilder.Entity("BOs.Conversation", b =>
                {
                    b.HasOne("BOs.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BOs.Message", b =>
                {
                    b.HasOne("BOs.Conversation", "Conservation")
                        .WithMany("Messages")
                        .HasForeignKey("ConservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conservation");
                });

            modelBuilder.Entity("BOs.User", b =>
                {
                    b.HasOne("BOs.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BOs.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("BOs.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
